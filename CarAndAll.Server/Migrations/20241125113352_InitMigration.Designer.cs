// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourNamespace;

#nullable disable

namespace CarAndAll.Server.Migrations
{
    [DbContext(typeof(CarAndAllContext))]
    [Migration("20241125113352_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("CarAndAll.Server.Models.Abonnement", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("Prijs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Type");

                    b.ToTable("Abonnementen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Bedrijf", b =>
                {
                    b.Property<int>("KvkNummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AbonnementType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("KvkNummer");

                    b.HasIndex("AbonnementType");

                    b.ToTable("Bedrijven");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Foto", b =>
                {
                    b.Property<int>("FotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedewerkerPersoneelsNummer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SchademeldingID")
                        .HasColumnType("INTEGER");

                    b.HasKey("FotoID");

                    b.HasIndex("MedewerkerPersoneelsNummer");

                    b.HasIndex("SchademeldingID");

                    b.ToTable("Fotos");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Klant", b =>
                {
                    b.Property<int>("KlantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AbonnementType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("BedrijfKvkNummer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("KlantID");

                    b.HasIndex("AbonnementType");

                    b.HasIndex("BedrijfKvkNummer");

                    b.ToTable("Klanten");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Medewerker", b =>
                {
                    b.Property<int>("PersoneelsNummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("PersoneelsNummer");

                    b.ToTable("Medewerkers");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Notitie", b =>
                {
                    b.Property<int>("NotitieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Inhoud")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("MedewerkerPersoneelsNummer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchademeldingID")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotitieID");

                    b.HasIndex("MedewerkerPersoneelsNummer");

                    b.HasIndex("SchademeldingID");

                    b.ToTable("Notities");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Schademelding", b =>
                {
                    b.Property<int>("SchademeldingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<int>("MedewerkerPersoneelsNummer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("VerhuuraanvraagAanvraagID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VoertuigKenteken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SchademeldingID");

                    b.HasIndex("MedewerkerPersoneelsNummer");

                    b.HasIndex("VerhuuraanvraagAanvraagID");

                    b.HasIndex("VoertuigKenteken");

                    b.ToTable("Schademeldingen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Verhuuraanvraag", b =>
                {
                    b.Property<int>("AanvraagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EindDatum")
                        .HasColumnType("TEXT");

                    b.Property<int>("KlantID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDatum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("VoertuigKenteken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AanvraagID");

                    b.HasIndex("KlantID");

                    b.HasIndex("VoertuigKenteken");

                    b.ToTable("Verhuuraanvragen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Voertuig", b =>
                {
                    b.Property<string>("Kenteken")
                        .HasColumnType("TEXT");

                    b.Property<int>("Aanschafjaar")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Merk")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Soort")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Kenteken");

                    b.ToTable("Voertuigen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Bedrijf", b =>
                {
                    b.HasOne("CarAndAll.Server.Models.Abonnement", "Abonnement")
                        .WithMany()
                        .HasForeignKey("AbonnementType");

                    b.Navigation("Abonnement");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Foto", b =>
                {
                    b.HasOne("CarAndAll.Server.Models.Medewerker", "Medewerker")
                        .WithMany("Fotos")
                        .HasForeignKey("MedewerkerPersoneelsNummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarAndAll.Server.Models.Schademelding", "Schademelding")
                        .WithMany("Fotos")
                        .HasForeignKey("SchademeldingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medewerker");

                    b.Navigation("Schademelding");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Klant", b =>
                {
                    b.HasOne("CarAndAll.Server.Models.Abonnement", null)
                        .WithMany("Klanten")
                        .HasForeignKey("AbonnementType");

                    b.HasOne("CarAndAll.Server.Models.Bedrijf", "Bedrijf")
                        .WithMany("Klanten")
                        .HasForeignKey("BedrijfKvkNummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bedrijf");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Notitie", b =>
                {
                    b.HasOne("CarAndAll.Server.Models.Medewerker", "Medewerker")
                        .WithMany("Notities")
                        .HasForeignKey("MedewerkerPersoneelsNummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarAndAll.Server.Models.Schademelding", "Schademelding")
                        .WithMany("Notities")
                        .HasForeignKey("SchademeldingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medewerker");

                    b.Navigation("Schademelding");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Schademelding", b =>
                {
                    b.HasOne("CarAndAll.Server.Models.Medewerker", "Medewerker")
                        .WithMany("Schademeldingen")
                        .HasForeignKey("MedewerkerPersoneelsNummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarAndAll.Server.Models.Verhuuraanvraag", "Verhuuraanvraag")
                        .WithMany("Schademeldingen")
                        .HasForeignKey("VerhuuraanvraagAanvraagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarAndAll.Server.Models.Voertuig", "Voertuig")
                        .WithMany("Schademeldingen")
                        .HasForeignKey("VoertuigKenteken")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medewerker");

                    b.Navigation("Verhuuraanvraag");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Verhuuraanvraag", b =>
                {
                    b.HasOne("CarAndAll.Server.Models.Klant", "Klant")
                        .WithMany("Verhuuraanvraagen")
                        .HasForeignKey("KlantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarAndAll.Server.Models.Voertuig", "Voertuig")
                        .WithMany("Verhuuraanvragen")
                        .HasForeignKey("VoertuigKenteken")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klant");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Abonnement", b =>
                {
                    b.Navigation("Klanten");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Bedrijf", b =>
                {
                    b.Navigation("Klanten");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Klant", b =>
                {
                    b.Navigation("Verhuuraanvraagen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Medewerker", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("Notities");

                    b.Navigation("Schademeldingen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Schademelding", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("Notities");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Verhuuraanvraag", b =>
                {
                    b.Navigation("Schademeldingen");
                });

            modelBuilder.Entity("CarAndAll.Server.Models.Voertuig", b =>
                {
                    b.Navigation("Schademeldingen");

                    b.Navigation("Verhuuraanvragen");
                });
#pragma warning restore 612, 618
        }
    }
}
